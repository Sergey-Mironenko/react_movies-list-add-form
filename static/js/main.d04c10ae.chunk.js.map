{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validation","useState","Math","random","toString","slice","id","touched","setToched","hasError","hasValidationError","htmlFor","classNames","type","placeholder","onBlur","NewMovie","onAdd","count","setCount","isValidImgUrl","setIsValidImgUrl","isValidImdbUrl","setIsValidImdbUrl","validator","url","test","inputFields","setInputFields","event","text","target","trim","onSubmit","preventDefault","current","disabled","App","moviesFromServer","visibleMovies","setVisibleMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d04c10ae.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState, ChangeEvent } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void,\n  validation?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange,\n  validation,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasValidationError = validation === false;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          name={name}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasValidationError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasValidationError && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState, ChangeEvent } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd(movie: Movie): void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const trimText = (text: string) => (\n    text[0] === ' ' ? text.trim() : text\n  );\n  const [count, setCount] = useState(0);\n\n  const [isValidImgUrl, setIsValidImgUrl] = useState(true);\n  const [isValidImdbUrl, setIsValidImdbUrl] = useState(true);\n  const validator = (url: string) => {\n    // eslint-disable-next-line\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-  +=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    if (!pattern.test(url)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const [inputFields, setInputFields] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n  const onChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    setInputFields({\n      ...inputFields,\n      [event.target.name]: trimText(event.target.value),\n    });\n  };\n\n  const clearForm = () => {\n    setInputFields({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const addMovie = (event: React.SyntheticEvent) => {\n    const movie: Movie = {\n      title: inputFields.title,\n      description: inputFields.description,\n      imgUrl: inputFields.imgUrl,\n      imdbUrl: inputFields.imdbUrl,\n      imdbId: inputFields.imdbId,\n    };\n\n    event.preventDefault();\n\n    setIsValidImgUrl(validator(inputFields.imgUrl));\n    setIsValidImdbUrl(validator(inputFields.imdbUrl));\n\n    if (validator(inputFields.imgUrl) && validator(inputFields.imdbUrl)) {\n      onAdd(movie);\n      setCount(current => current + 1);\n\n      clearForm();\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={addMovie}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={inputFields.title}\n        onChange={onChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={inputFields.description}\n        onChange={onChange}\n        required={false}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={inputFields.imgUrl}\n        onChange={(event) => {\n          onChange(event);\n          setIsValidImgUrl(true);\n        }}\n        required\n        validation={isValidImgUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={inputFields.imdbUrl}\n        onChange={(event) => {\n          onChange(event);\n          setIsValidImdbUrl(true);\n        }}\n        required\n        validation={isValidImdbUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={inputFields.imdbId}\n        onChange={onChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={(\n              inputFields.title === ''\n              || inputFields.imgUrl === ''\n              || inputFields.imdbUrl === ''\n              || inputFields.imdbId === ''\n            )}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [visibleMovies, setVisibleMovies] = useState(moviesFromServer);\n  const onAdd = (movie: Movie) => {\n    setVisibleMovies(current => [\n      ...current,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={visibleMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}