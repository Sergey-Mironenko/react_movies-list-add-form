{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validation","useState","Math","random","toString","slice","id","touched","setToched","hasError","hasValidationError","htmlFor","classNames","type","placeholder","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","validImgUrl","setValidImgUrl","validImdbUrl","setValidImdbUrl","validator","url","test","onSubmit","event","preventDefault","current","target","disabled","App","moviesFromServer","visibleMovies","setVisibleMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ed24eb7.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState, ChangeEvent } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: ChangeEvent<HTMLInputElement>) => void,\n  validation?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange,\n  validation,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasValidationError = validation === false;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasValidationError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasValidationError && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd(movie: Movie): void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [validImgUrl, setValidImgUrl] = useState(true);\n  const [validImdbUrl, setValidImdbUrl] = useState(true);\n\n  const validator = (url: string) => {\n    // eslint-disable-next-line\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-  +=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    if (!pattern.test(url)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event: React.SyntheticEvent) => {\n        const movie: Movie = {\n          title,\n          description,\n          imgUrl,\n          imdbUrl,\n          imdbId,\n        };\n\n        event.preventDefault();\n\n        setValidImgUrl(validator(imgUrl));\n        setValidImdbUrl(validator(imdbUrl));\n\n        if (validator(imgUrl) && validator(imdbUrl)) {\n          onAdd(movie);\n          setCount(current => current + 1);\n\n          setTitle('');\n          setDescription('');\n          setImgUrl('');\n          setImdbUrl('');\n          setImdbId('');\n        }\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(event) => setDescription(event.target.value)}\n        required={false}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(event) => {\n          setImgUrl(event.target.value);\n          setValidImgUrl(true);\n        }}\n        required\n        validation={validImgUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(event) => {\n          setImdbUrl(event.target.value);\n          setValidImdbUrl(true);\n        }}\n        required\n        validation={validImdbUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(event) => setImdbId(event.target.value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={(\n              title === '' || imgUrl === '' || imdbUrl === '' || imdbId === ''\n            )}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [visibleMovies, setVisibleMovies] = useState(moviesFromServer);\n  const onAdd = (movie: Movie) => {\n    setVisibleMovies(current => [\n      ...current,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={visibleMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}